
stages:
  - stage: compile
    jobs:
      - job: aspnet
        pool:
          vmImage: ubuntu-18.04
        steps:
          - script: |
              dotnet build FlashCard.sln

  - stage: test
    jobs:
    - job: aspnet_test
      pool:
        vmImage: ubuntu-18.04
      steps:
        - script: dotnet test ./FlashCard.sln --logger trx --collect:"XPlat Code Coverage"
        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: cobertura
            summaryFileLocation: '**/coverage.cobertura.xml'

  - stage: analyze
    jobs:
    - job:
      pool:
        vmImage: ubuntu-18.04
      steps:
        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            version: '3.0.100'
        - script: dotnet tool install --global dotnet-sonarscanner
        - script: |
            dotnet sonarscanner begin \
            /d:sonar.login=$(SONAR_LOGIN) \
            /d:sonar.host.url=https://sonarcloud.io \
            /d:sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml \
            /d:sonar.cs.vstest.reportsPaths=**/*.trx \
            /d:sonar.javascript.exclusions=**/FlashCard.Client/wwwroot/** \
            /k:FlashCard-rlguzman \
            /o:rlguzman
            dotnet build FlashCard.sln
            dotnet test FlashCard.sln --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
            dotnet sonarscanner end /d:sonar.login=$(SONAR_LOGIN)
          env:
            SONAR_LOGIN: $(SONAR_LOGIN)

  - stage: pack_aspnet
    displayName: pack_aspnet
    dependsOn: build
    condition: and(succeeded('build'), or(
      eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      startsWith(variables['Build.SourceBranch'], 'refs/tags')))
    jobs:
    - job: pack_aspnet
      displayName: pack::aspnet
      pool:
        vmImage: ubuntu-18.04
      steps:

      - task: Docker@2
        displayName: docker login
        inputs:
          command: login
          containerRegistry: rlguzman-docker
      - script: |
          set -e
          docker image build -f .docker/service.dockerfile -t flashcard_api .
          docker image tag flashcard_api rlguzman/flashcard_api:dev
          docker image push rlguzman/flashcard_api:dev
        displayName: docker push::dev
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      - task: Docker@2
        displayName: docker logout
        inputs:
          command: logout
          containerRegistry: rlguzman-docker
